// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/hwameistor/datastore/pkg/apis/datastore/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataSetLister helps list DataSets.
type DataSetLister interface {
	// List lists all DataSets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.DataSet, err error)
	// DataSets returns an object that can list and get DataSets.
	DataSets(namespace string) DataSetNamespaceLister
	DataSetListerExpansion
}

// dataSetLister implements the DataSetLister interface.
type dataSetLister struct {
	indexer cache.Indexer
}

// NewDataSetLister returns a new DataSetLister.
func NewDataSetLister(indexer cache.Indexer) DataSetLister {
	return &dataSetLister{indexer: indexer}
}

// List lists all DataSets in the indexer.
func (s *dataSetLister) List(selector labels.Selector) (ret []*v1alpha1.DataSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataSet))
	})
	return ret, err
}

// DataSets returns an object that can list and get DataSets.
func (s *dataSetLister) DataSets(namespace string) DataSetNamespaceLister {
	return dataSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DataSetNamespaceLister helps list and get DataSets.
type DataSetNamespaceLister interface {
	// List lists all DataSets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.DataSet, err error)
	// Get retrieves the DataSet from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.DataSet, error)
	DataSetNamespaceListerExpansion
}

// dataSetNamespaceLister implements the DataSetNamespaceLister
// interface.
type dataSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DataSets in the indexer for a given namespace.
func (s dataSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DataSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DataSet))
	})
	return ret, err
}

// Get retrieves the DataSet from the indexer for a given namespace and name.
func (s dataSetNamespaceLister) Get(name string) (*v1alpha1.DataSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("dataset"), name)
	}
	return obj.(*v1alpha1.DataSet), nil
}
